stages: 
    - build
    - package
    - testing
    - deploy
    
variables:
    APP_VERSION: $CI_PIPELINE_IID

build website:
    image: node:16-alpine
    stage: build
    script:
      - yarn install
      - yarn build
      - yarn test
      - echo $APP_VERSION > build/version.html
    artifacts: 
      paths:
        - build

build docker image:
    stage: package
    image: docker:20.10.12
    services:
      - docker:20.10.12-dind
    script:
      - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
      - docker build -t $CI_REGISTRY_IMAGE -t $CI_REGISTRY_IMAGE:$APP_VERSION .
      - docker image ls
      - docker push --all-tags $CI_REGISTRY_IMAGE

test docker image:
    stage: testing
    image: curlimages/curl
    services:
      - name: $CI_REGISTRY_IMAGE:$APP_VERSION
        alias: website
    script:
      - curl http://website/version.html | grep $APP_VERSION


deploy to prod:
    stage: deploy
    variables:
      APP_NAME: web-app
      APP_NAME_ENV: web-app-env
    image:
      name: amazon/aws-cli:2.4.11
      entrypoint: [""]
    environment: prod
    script: 
      - aws --version
      - yum install -y gettext
      - export DEPLOY_TOKEN=$(echo $DEPLOY_TOKEN | tr -d "/n" | base64)
      - envsubst < templates/Dockerrun.aws.json > Dockerrun.aws.json
      - envsubst < templates/auth.json > auth.json
      - aws s3 cp Dockerrun.aws.json s3://$AWS_BUCKET/Dockerrun.aws.json
      - aws s3 cp auth.json s3://$AWS_BUCKET/auth.json 
      - aws elasticbeanstalk create-application-version --application-name $APP_NAME --version-label $APP_VERSION --source-bundle S3Bucket=$AWS_BUCKET,S3Key=Dockerrun.aws.json
      - aws elasticbeanstalk update-environment --application-name $APP_NAME --version-label $APP_VERSION --environment-name $APP_NAME_ENV
      - aws elasticbeanstalk wait environment-updated --application-name $APP_NAME --version-label $APP_VERSION --environment-name $APP_NAME_ENV 
      - curl $CI_ENVIRONMENT_URL/version.html | grep $APP_VERSION
